# import_news.py
import asyncio
import asyncpg
import json
from dataclasses import dataclass
from typing import List, Dict, Any
from datetime import date


# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
@dataclass
class DBSettings:
    user: str = "postgres"
    password: str = "mastdmastd"
    host: str = "localhost"
    port: int = 5433
    database: str = "goals_n_projects"


JSON_FILE_PATH = "filtered_news.json"

TYPO_MAP = {
    "–†–ï–ê–õ–ò–ó–ê–¶–ò–Ø –ü–û–¢–ï–ù–¶–ò–ê–õ–ê –ö–ê–ñ–î–û–ì–û –ß–ï–õ–û–í–ï–ö–ê, –†–ê–ó–í–ò–¢–ò–ï –ï–ì–û –¢–ê–õ–ê–ù–¢–û–í, –í–û–°–ü–ò–¢–ê–ù–ò–ï –ü–ê–¢–†–ò–ûTI–ß–ù–û–ô –ò –°–û–¶–ò–ê–õ–¨–ù–û –û–¢–í–ï–¢–°–¢–í–ï–ù–ù–û–ô –õ–ò–ß–ù–û–°–¢–ò":
    "–†–ï–ê–õ–ò–ó–ê–¶–ò–Ø –ü–û–¢–ï–ù–¶–ò–ê–õ–ê –ö–ê–ñ–î–û–ì–û –ß–ï–õ–û–í–ï–ö–ê, –†–ê–ó–í–ò–¢–ò–ï –ï–ì–û –¢–ê–õ–ê–ù–¢–û–í, –í–û–°–ü–ò–¢–ê–ù–ò–ï –ü–ê–¢–†–ò–û–¢–ò–ß–ù–û–ô –ò –°–û–¶–ò–ê–õ–¨–ù–û –û–¢–í–ï–¢–°–¢–í–ï–ù–ù–û–ô –õ–ò–ß–ù–û–°–¢–ò"
}


async def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ JSON-—Ñ–∞–π–ª–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    """
    settings = DBSettings()
    conn = None
    try:
        conn = await asyncpg.connect(
            user=settings.user,
            password=settings.password,
            host=settings.host,
            port=settings.port,
            database=settings.database
        )
        print("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

        # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON-—Ñ–∞–π–ª–∞
        try:
            with open(JSON_FILE_PATH, 'r', encoding='utf-8') as f:
                news_data = json.load(f)
            print(f"üìÑ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(news_data)} –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ —Ñ–∞–π–ª–∞.")
        except FileNotFoundError:
            print(f"‚ùå –û–®–ò–ë–ö–ê: –§–∞–π–ª '{JSON_FILE_PATH}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        except json.JSONDecodeError:
            print(f"‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å JSON –∏–∑ —Ñ–∞–π–ª–∞ '{JSON_FILE_PATH}'.")
            return

        # 2. –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
        async with conn.transaction():
            print("\n--- –ù–∞—á–∞–ª–æ –∏–º–ø–æ—Ä—Ç–∞ –Ω–æ–≤–æ—Å—Ç–µ–π ---")

            regions_cache = {r['name']: r['id'] for r in await conn.fetch("SELECT id, name FROM regions")}
            goals_cache = {g['name'].upper(): g['id'] for g in await conn.fetch("SELECT id, name FROM national_goals")}

            inserted_count = 0
            updated_count = 0
            processed_count = 0

            for news_item in news_data:
                processed_count += 1
                region_name = news_item.get("region_name")
                goal_name = news_item.get("national_goal")

                region_id = regions_cache.get(region_name)
                if not region_id:
                    print(f"  -> –†–µ–≥–∏–æ–Ω '{region_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π...")
                    region_id = await conn.fetchval(
                        "INSERT INTO regions (name) VALUES ($1) ON CONFLICT (name) DO UPDATE SET name=EXCLUDED.name RETURNING id",
                        region_name)
                    regions_cache[region_name] = region_id

                if not goal_name:
                    print(f"  ‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ –Ω–æ–≤–æ—Å—Ç–∏: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Ü. —Ü–µ–ª–∏.")
                    continue

                # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—á–∞—Ç–∫–∏
                goal_name_upper = goal_name.upper()
                if goal_name_upper in TYPO_MAP:
                    goal_name = TYPO_MAP[goal_name_upper]
                    goal_name_upper = goal_name.upper()

                goal_id = goals_cache.get(goal_name_upper)
                if not goal_id:
                    print(f"  ‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ –Ω–æ–≤–æ—Å—Ç–∏: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞—Ü. —Ü–µ–ª—å '{goal_name}' –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ.")
                    continue

                project_ids = await conn.fetch(
                    "SELECT project_id FROM project_to_goal_mapping WHERE goal_id = $1",
                    goal_id
                )

                if not project_ids:
                    print(f"  ‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ –Ω–æ–≤–æ—Å—Ç–∏: –¥–ª—è –Ω–∞—Ü. —Ü–µ–ª–∏ '{goal_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.")
                    continue

                published_date_str = news_item.get("published_date")
                published_date_obj = date.fromisoformat(published_date_str) if published_date_str else None

                last_update_str = news_item.get("last_update")
                last_update_obj = date.fromisoformat(last_update_str) if last_update_str else None

                for record in project_ids:
                    project_id = record['project_id']

                    query = """
                        INSERT INTO project_activities (
                            project_id, region_id, title, activity_date, link, 
                            responsible_body, text, importance, last_update
                        ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
                        ON CONFLICT (link) DO UPDATE SET
                            title = EXCLUDED.title,
                            activity_date = EXCLUDED.activity_date,
                            responsible_body = EXCLUDED.responsible_body,
                            text = EXCLUDED.text,
                            importance = EXCLUDED.importance,
                            last_update = EXCLUDED.last_update
                        RETURNING (xmax = 0) AS inserted;
                    """

                    result = await conn.fetchrow(
                        query,
                        project_id,
                        region_id,
                        news_item.get("title"),
                        published_date_obj,
                        news_item.get("url"),
                        news_item.get("source_name"),
                        news_item.get("content"),
                        news_item.get("importance"),
                        last_update_obj
                    )

                    if result and result['inserted']:
                        inserted_count += 1
                    else:
                        updated_count += 1

            print("\n--- –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω ---")
            print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ —Ñ–∞–π–ª–∞: {processed_count}")
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ –ë–î: {inserted_count}")
            print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π: {updated_count}")

    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        print("--- –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±—ã–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã (–æ—Ç–∫–∞—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏) ---")
    finally:
        if conn:
            await conn.close()
            print("\nüîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ.")


if __name__ == "__main__":
    print("--- –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –Ω–æ–≤–æ—Å—Ç–µ–π ---")
    asyncio.run(main())
