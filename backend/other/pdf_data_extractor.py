# /backend/pdf_data_extractor.py (–§–ò–ù–ê–õ–¨–ù–ê–Ø –†–ê–ë–û–ß–ê–Ø –í–ï–†–°–ò–Ø)

import pdfplumber
import pandas as pd
import re
import os

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
PDF_FILE_PATH = "/Users/andrey/Desktop/–ù–∞—Ü—Ü–µ–ª–∏ 7 —à—Ç.pdf"
OUTPUT_EXCEL_PATH = "–Ω–∞—Ü—Ü–µ–ª–∏_—Ä–µ–∑—É–ª—å—Ç–∞—Ç.xlsx"


def clean_text(text):
    """–£–±–∏—Ä–∞–µ—Ç –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫."""
    if not text:
        return ""
    return ' '.join(text.strip().split())


def parse_goals_pdf(file_path: str):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ PDF-—Ñ–∞–π–ª–∞ —Å –Ω–∞—Ü—Ü–µ–ª—è–º–∏, –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏ –∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏.
    """
    if not os.path.exists(file_path):
        print(f"–û–®–ò–ë–ö–ê: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏: {file_path}")
        return None

    all_indicators = []
    current_goal = "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞"
    current_metric = "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"

    print(f"–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞: {file_path}")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
    table_settings = {
        "vertical_strategy": "lines",
        "horizontal_strategy": "text",
        "snap_tolerance": 3,
    }

    with pdfplumber.open(file_path) as pdf:
        for page_num, page in enumerate(pdf.pages, 1):
            print(f"--- –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É {page_num} –∏–∑ {len(pdf.pages)} ---")

            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            full_text = page.extract_text(x_tolerance=2, y_tolerance=2) or ""
            lines = full_text.split('\n')

            for line in lines:
                goal_match = re.match(r'^[IVX]+\.\s(.+)', line)
                if goal_match and '...' not in line:
                    current_goal = clean_text(goal_match.group(1))
                    print(f"  [–ù–∞–π–¥–µ–Ω–∞ –ù–∞—Ü—Ü–µ–ª—å]: {current_goal}")
                    current_metric = "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –ø—Ä–∏ —Å–º–µ–Ω–µ —Ü–µ–ª–∏
                    continue

                metric_match = re.match(r'^\d+\.\s(.+)', line)
                if metric_match and '...' not in line:
                    current_metric = clean_text(metric_match.group(1))
                    print(f"    [–ù–∞–π–¥–µ–Ω –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å]: {current_metric}")

            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
            tables = page.extract_tables(table_settings)
            if not tables:
                continue

            for table_data in tables:
                if not table_data or len(table_data) < 2:
                    continue

                header = [clean_text(h) for h in table_data[0]]

                # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—â–µ–º –ª—é–±–æ–π –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ ---
                indicator_col_name = next((h for h in header if '–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä' in h.lower()), None)
                unit_col_name = next((h for h in header if '–∏–∑–º' in h.lower()), None)

                if not indicator_col_name:
                    continue

                print(f"      [–ù–∞–π–¥–µ–Ω–∞ –≤–∞–ª–∏–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞] –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞: '{indicator_col_name}'")

                year_columns = {idx: int(re.search(r'(\d{4})', col).group(1)) for idx, col in enumerate(header) if
                                re.search(r'(\d{4})', col)}
                if not year_columns:
                    continue

                indicator_col_idx = header.index(indicator_col_name)
                unit_col_idx = header.index(unit_col_name) if unit_col_name else -1

                for row in table_data[1:]:
                    if indicator_col_idx >= len(row): continue

                    indicator_name = clean_text(row[indicator_col_idx])
                    if not indicator_name or len(indicator_name) < 5: continue

                    unit = clean_text(row[unit_col_idx]) if unit_col_idx != -1 and row[unit_col_idx] else ''
                    for col_idx, year in year_columns.items():
                        if col_idx < len(row):
                            ref_val_str = (row[col_idx] or "").replace(',', '.')
                            try:
                                ref_val = float(ref_val_str)
                            except (ValueError, TypeError):
                                ref_val = None

                            all_indicators.append({
                                '–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ü–µ–ª—å': current_goal,
                                '–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞—Ü. —Ü–µ–ª–∏': current_metric,
                                '–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä': indicator_name,
                                '–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è': unit,
                                '–ì–æ–¥': year,
                                '–≠—Ç–∞–ª–æ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ': ref_val
                            })

    print("\n–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –°–æ–∑–¥–∞–µ–º DataFrame...")
    df = pd.DataFrame(all_indicators)
    return df


# --- –ì–ª–∞–≤–Ω—ã–π –±–ª–æ–∫ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ ---
if __name__ == "__main__":
    final_df = parse_goals_pdf(PDF_FILE_PATH)

    if final_df is not None and not final_df.empty:
        try:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
            final_df.sort_values(by=['–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ü–µ–ª—å', '–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞—Ü. —Ü–µ–ª–∏', '–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä', '–ì–æ–¥'],
                                 inplace=True)

            final_df.to_excel(OUTPUT_EXCEL_PATH, index=False, engine='openpyxl')
            print("\n=======================================================")
            print(f"üéâ –£–°–ü–ï–•! –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª:")
            print(f"   {os.path.abspath(OUTPUT_EXCEL_PATH)}")
            print("=======================================================")

        except Exception as e:
            print(f"\n–û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å Excel-—Ñ–∞–π–ª. –ü—Ä–∏—á–∏–Ω–∞: {e}")
    else:
        print("\n–ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ PDF-—Ñ–∞–π–ª –∏–ª–∏ –ª–æ–≥–∏–∫—É –ø–∞—Ä—Å–µ—Ä–∞.")