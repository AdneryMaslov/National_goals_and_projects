# populate_db.py

import asyncio
import pandas as pd
import asyncpg
import re
from app.core.database import settings

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ---
CSV_FILE_PATH = 'table_csv_1.csv'
YEAR_COLUMNS = [str(year) for year in range(2021, 2031)] + ['2035']


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

def clean_project_names(text: str) -> list[str]:
    """–û—á–∏—â–∞–µ—Ç –∏ —Ä–∞–∑–¥–µ–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –Ω–∞—Ü–ø—Ä–æ–µ–∫—Ç–∞–º–∏ –Ω–∞ —Å–ø–∏—Å–æ–∫ –¢–û–õ–¨–ö–û –ø–æ –ø–µ—Ä–µ–Ω–æ—Å—É —Å—Ç—Ä–æ–∫–∏."""
    if not isinstance(text, str) or text.strip() == '':
        return []
    return [name.strip() for name in text.split('\n') if name.strip()]


def map_desired_direction(text: str) -> str | None:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–∏–ø –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è ('–ü—Ä—è–º–æ–π'/'–û–±—Ä–∞—Ç–Ω—ã–π') –≤ —Ñ–ª–∞–≥ 'higher' –∏–ª–∏ 'lower'."""
    if not isinstance(text, str):
        return None
    text = text.lower().strip()
    if text == '–ø—Ä—è–º–æ–π':
        return 'higher'
    if text == '–æ–±—Ä–∞—Ç–Ω—ã–π':
        return 'lower'
    return None


# --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞ ---

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö."""
    conn = None
    try:
        conn = await asyncpg.connect(
            user=settings.db_user, password=settings.db_password,
            database=settings.db_name, host=settings.db_host, port=settings.db_port
        )
        print("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")

        df = pd.read_csv(CSV_FILE_PATH, engine='python', sep=';')
        print("–ù–ê–ó–í–ê–ù–ò–Ø –°–¢–û–õ–ë–¶–û–í –í –§–ê–ô–õ–ï:", list(df.columns))
        print(f"üìñ –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç {len(df)} —Å—Ç—Ä–æ–∫.")

        # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        print("üßπ –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –Ω—É–º–µ—Ä–∞—Ü–∏–∏ –∏ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤...")
        df['–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ü–µ–ª—å'] = df['–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ü–µ–ª—å'].astype(str).str.replace(r'^\d+\.\s*', '',
                                                                                  regex=True).str.strip()
        df['–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å'] = df['–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å'].astype(str).str.replace(r'^\d+(\.\d+)*(\.?[–∞-—è])?\.\s*', '',
                                                                    regex=True).str.strip()
        prefix_pattern = r'^((\d+(\.\d+)*(\.?[–∞-—è])?\.\s*)|(–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π:\s*))'
        df['–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä'] = df['–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä'].astype(str).str.replace(prefix_pattern, '',
                                                                                                regex=True).str.strip()
        print("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã. –í—Å–µ —Å—Ç—Ä–æ–∫–∏ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")

        # –ò—Ç–µ—Ä–∞—Ü–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        for index, row in df.iterrows():
            if row.isnull().all():
                continue

            async with conn.transaction():
                try:
                    goal_name = str(row['–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ü–µ–ª—å']).strip()
                    goal_id = await conn.fetchval(
                        'INSERT INTO national_goals (name) VALUES ($1) ON CONFLICT (name) DO UPDATE SET name = EXCLUDED.name RETURNING id',
                        goal_name)

                    metric_name = str(row['–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å']).strip()
                    metric_id = await conn.fetchval(
                        'INSERT INTO goal_metrics (name, goal_id) VALUES ($1, $2) ON CONFLICT (goal_id, name) DO UPDATE SET name = EXCLUDED.name RETURNING id',
                        metric_name, goal_id)

                    indicator_name = str(row['–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä']).strip()
                    indicator_id = await conn.fetchval(
                        """
                        INSERT INTO indicators (name, metric_id, unit, desired_direction, source_url, periodicity, responsible_foiv, use_for_agent, indicator_type)
                        VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
                        ON CONFLICT (name) DO UPDATE SET
                            metric_id = EXCLUDED.metric_id, unit = EXCLUDED.unit, desired_direction = EXCLUDED.desired_direction,
                            source_url = EXCLUDED.source_url, periodicity = EXCLUDED.periodicity,
                            responsible_foiv = EXCLUDED.responsible_foiv, use_for_agent = EXCLUDED.use_for_agent,
                            indicator_type = EXCLUDED.indicator_type
                        RETURNING id
                        """,
                        indicator_name, metric_id,
                        str(row.get('–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è')) if pd.notna(row.get('–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è')) else None,
                        map_desired_direction(row.get('–¢–∏–ø –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è')),
                        str(row.get('–°—Å—ã–ª–∫–∞')) if pd.notna(row.get('–°—Å—ã–ª–∫–∞')) else None,
                        str(row.get('–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è')) if pd.notna(
                            row.get('–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è')) else None,
                        str(row.get('–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π (–§–û–ò–í)')) if pd.notna(row.get('–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π (–§–û–ò–í)')) else None,
                        str(row.get('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –∞–≥–µ–Ω—Ç–∞')).lower() == '–¥–∞',
                        # --- –î–û–ë–ê–í–õ–ï–ù–û: –ß—Ç–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ ---
                        row.get('–¢–∏–ø –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞').strip() if pd.notna(row.get('–¢–∏–ø –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞')) else None
                    )

                    project_names = clean_project_names(row.get('–ù–∞—Ü–ø—Ä–æ–µ–∫—Ç'))
                    for proj_name in project_names:
                        project_id = await conn.fetchval(
                            'INSERT INTO national_projects (name) VALUES ($1) ON CONFLICT (name) DO UPDATE SET name = EXCLUDED.name RETURNING id',
                            proj_name)
                        await conn.execute(
                            'INSERT INTO project_to_goal_mapping (project_id, goal_id) VALUES ($1, $2) ON CONFLICT DO NOTHING',
                            project_id, goal_id)
                        await conn.execute(
                            'INSERT INTO indicator_to_project_mapping (indicator_id, project_id) VALUES ($1, $2) ON CONFLICT DO NOTHING',
                            indicator_id, project_id)

                    for year_col in YEAR_COLUMNS:
                        if year_col in df.columns and pd.notna(row[year_col]):
                            year = int(year_col)
                            value = str(row[year_col])
                            await conn.execute(
                                'INSERT INTO indicator_reference_values (indicator_id, year, reference_value) VALUES ($1, $2, $3) ON CONFLICT (indicator_id, year) DO UPDATE SET reference_value = EXCLUDED.reference_value',
                                indicator_id, year, value)

                    print(f"  -> –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä: {indicator_name[:70]}...")

                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏ {index + 2}: {indicator_name[:70]}... | {e}")

    except Exception as e:
        print(f"üî• –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

    finally:
        if conn:
            await conn.close()
            print("üõë –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ.")


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ –ë–î...")
    asyncio.run(main())