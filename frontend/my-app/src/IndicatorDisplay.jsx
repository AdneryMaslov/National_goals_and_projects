import React, { useState } from 'react';
import LineChart from './LineChart';

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ---

// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —á–∏—Å–ª–∞ –≤ –¥–µ–Ω–µ–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (1000 -> 1 000 ‚ÇΩ)
const formatCurrency = (number) => {
  if (number === undefined || number === null) return 'N/A';
  return new Intl.NumberFormat('ru-RU', { style: 'currency', currency: 'RUB', minimumFractionDigits: 0 }).format(number);
};

// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ–ª—å—Ç—É, –¥–æ–±–∞–≤–ª—è—è –∑–Ω–∞–∫ "+" –∏ –æ–∫—Ä—É–≥–ª—è—è –¥–æ 2 –∑–Ω–∞–∫–æ–≤
const formatDelta = (number) => {
  if (number === undefined || number === null) return 'N/A';
  const rounded = Math.round(number * 100) / 100;
  return rounded > 0 ? `+${rounded}` : rounded;
};

const IndicatorDisplay = ({ indicators }) => {
  const [activeChart, setActiveChart] = useState(null);

  const showChart = (indicator) => {
    setActiveChart({
      data: indicator.chartData,
      title: `–î–∏–Ω–∞–º–∏–∫–∞: ${indicator.name}`
    });
  };
  
  const hideChart = () => {
    setActiveChart(null);
  };

  return (
    <div className="indicator-display">
      <h4>–ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏</h4>
      <div className="table-responsive">
        <table>
          <thead>
            <tr>
              <th>–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è</th>
              <th>–ó–Ω–∞—á–µ–Ω–∏–µ</th>
              <th>–°—Ä–µ–¥–Ω–µ–µ –†–§</th>
              <th>–¶–µ–ª—å</th>
              <th>Œî –æ—Ç –†–§</th>
              <th>Œî –æ—Ç —Ü–µ–ª–∏</th>
              <th>–ë—é–¥–∂–µ—Ç, –≤—ã–¥–µ–ª.</th>
              <th>–ë—é–¥–∂–µ—Ç, –∏—Å–ø–æ–ª–Ω.</th>
              <th>–ò—Å–ø–æ–ª–Ω., %</th>
              <th>–ì—Ä–∞—Ñ–∏–∫</th>
            </tr>
          </thead>
          <tbody>
            {indicators.map((indicator) => {
              // --- –†–∞—Å—á–µ—Ç—ã ---
              const deltaRf = indicator.regionValue - indicator.rfValue;
              const deltaTarget = indicator.regionValue - indicator.targetValue;
              const budgetPercentage = indicator.budget.allocated > 0 
                ? (indicator.budget.executed / indicator.budget.allocated * 100)
                : 0;

              // --- –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ ---
              // isReversed = true (–±–µ–¥–Ω–æ—Å—Ç—å): —Ö–æ—Ä–æ—à–æ, –∫–æ–≥–¥–∞ –¥–µ–ª—å—Ç–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è
              // isReversed = false (–û–ü–ñ): —Ö–æ—Ä–æ—à–æ, –∫–æ–≥–¥–∞ –¥–µ–ª—å—Ç–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è
              const deltaRfIsGood = indicator.isReversed ? deltaRf < 0 : deltaRf > 0;
              const deltaTargetIsGood = indicator.isReversed ? deltaTarget <= 0 : deltaTarget >= 0;

              return (
                <tr key={indicator.name}>
                  <td>{indicator.name}</td>
                  <td className="text-bold">{indicator.regionValue}</td>
                  <td>{indicator.rfValue}</td>
                  <td>{indicator.targetValue}</td>
                  <td className={deltaRfIsGood ? 'text-green' : 'text-red'}>{formatDelta(deltaRf)}</td>
                  <td className={deltaTargetIsGood ? 'text-green' : 'text-red'}>{formatDelta(deltaTarget)}</td>
                  <td>{formatCurrency(indicator.budget.allocated)}</td>
                  <td>{formatCurrency(indicator.budget.executed)}</td>
                  <td className="text-bold">{budgetPercentage.toFixed(1)}%</td>
                  <td>
                    <button onClick={() => showChart(indicator)} title="–ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –¥–∏–Ω–∞–º–∏–∫–∏">
                      üìà
                    </button>
                  </td>
                </tr>
              );
            })}
          </tbody>
        </table>
      </div>

      {activeChart && (
        <div className="graph-container modal-graph">
          <div className="graph-header">
             <h5>{activeChart.title}</h5>
             <button onClick={hideChart} className="close-graph-button">–ó–∞–∫—Ä—ã—Ç—å</button>
          </div>
          <LineChart chartData={activeChart.data} title={activeChart.title} />
        </div>
      )}
    </div>
  );
};

export default IndicatorDisplay;
